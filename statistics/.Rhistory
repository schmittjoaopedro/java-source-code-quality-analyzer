)
if(plotType == "all_brute") {
gg <- ggplot(bruteData, aes(key_size))
gg <- gg + ggtitle("All Brute Force")
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Brute force"))
gg
} else if (plotType == "all_pollard") {
gg <- ggplot(pollardData, aes(key_size))
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Pollard force"))
gg
}
require(ggplot2)
require(dplyr)
setwd("/home/joao/projects/master-degree/rsa/results")
bruteData = read.csv(file = "results-brute.csv", sep = ";")
pollardData = read.csv(file = "results-pollard.csv", sep = ";")
bruteData = bruteData %>%
group_by(key_size) %>%
summarise(
generate_keys_mean = mean(generate_keys),
encrypt_mean = mean(encrypt),
decrypt_mean = mean(decrypt),
brute_force_mean = mean(brute_force)
)
pollardData = pollardData %>%
group_by(key_size) %>%
summarise(
generate_keys_mean = mean(generate_keys),
encrypt_mean = mean(encrypt),
decrypt_mean = mean(decrypt),
brute_force_mean = mean(brute_force)
)
if(plotType == "all_brute") {
gg <- ggplot(bruteData, aes(key_size))
gg <- gg + ggtitle("All Brute Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time")
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Brute force"))
gg
} else if (plotType == "all_pollard") {
gg <- ggplot(pollardData, aes(key_size))
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Pollard force"))
gg
}
require(ggplot2)
require(dplyr)
setwd("/home/joao/projects/master-degree/rsa/results")
bruteData = read.csv(file = "results-brute.csv", sep = ";")
pollardData = read.csv(file = "results-pollard.csv", sep = ";")
bruteData = bruteData %>%
group_by(key_size) %>%
summarise(
generate_keys_mean = mean(generate_keys) / 1000,
encrypt_mean = mean(encrypt) / 1000,
decrypt_mean = mean(decrypt) / 1000,
brute_force_mean = mean(brute_force) / 1000
)
pollardData = pollardData %>%
group_by(key_size) %>%
summarise(
generate_keys_mean = mean(generate_keys) / 1000,
encrypt_mean = mean(encrypt) / 1000,
decrypt_mean = mean(decrypt) / 1000,
brute_force_mean = mean(brute_force) / 1000
)
if(plotType == "all_brute") {
gg <- ggplot(bruteData, aes(key_size))
gg <- gg + ggtitle("All Brute Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Brute force"))
gg
} else if (plotType == "all_pollard") {
gg <- ggplot(pollardData, aes(key_size))
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Pollard force"))
gg
}
plotType = "all_pollard"
require(ggplot2)
require(dplyr)
setwd("/home/joao/projects/master-degree/rsa/results")
bruteData = read.csv(file = "results-brute.csv", sep = ";")
pollardData = read.csv(file = "results-pollard.csv", sep = ";")
bruteData = bruteData %>%
group_by(key_size) %>%
summarise(
generate_keys_mean = mean(generate_keys) / 1000,
encrypt_mean = mean(encrypt) / 1000,
decrypt_mean = mean(decrypt) / 1000,
brute_force_mean = mean(brute_force) / 1000
)
pollardData = pollardData %>%
group_by(key_size) %>%
summarise(
generate_keys_mean = mean(generate_keys) / 1000,
encrypt_mean = mean(encrypt) / 1000,
decrypt_mean = mean(decrypt) / 1000,
brute_force_mean = mean(brute_force) / 1000
)
if(plotType == "all_brute") {
gg <- ggplot(bruteData, aes(key_size))
gg <- gg + ggtitle("All Brute Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Brute force"))
gg
} else if (plotType == "all_pollard") {
gg <- ggplot(pollardData, aes(key_size))
gg <- gg + ggtitle("All Pollard Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Pollard force"))
gg
}
plotType = "all_force"
data = pollardData
daa
data
require(ggplot2)
require(dplyr)
setwd("/home/joao/projects/master-degree/rsa/results")
bruteData = read.csv(file = "results-brute.csv", sep = ";")
pollardData = read.csv(file = "results-pollard.csv", sep = ";")
bruteData = bruteData %>%
group_by(key_size) %>%
summarise(
generate_keys_mean = mean(generate_keys) / 1000,
encrypt_mean = mean(encrypt) / 1000,
decrypt_mean = mean(decrypt) / 1000,
brute_force_mean = mean(brute_force) / 1000
)
pollardData = pollardData %>%
group_by(key_size) %>%
summarise(
generate_keys_mean = mean(generate_keys) / 1000,
encrypt_mean = mean(encrypt) / 1000,
decrypt_mean = mean(decrypt) / 1000,
brute_force_mean = mean(brute_force) / 1000
)
if(plotType == "all_brute") {
gg <- ggplot(bruteData, aes(key_size))
gg <- gg + ggtitle("All Brute Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Brute force"))
gg
} else if (plotType == "all_pollard") {
gg <- ggplot(pollardData, aes(key_size))
gg <- gg + ggtitle("All Pollard Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Pollard force"))
gg
} else if (plotType == "all_force") {
gg <- ggplot(pollardData, aes(key_size))
gg <- gg + ggtitle("All Pollard Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Pollard force"))
}
gg
bruteData$brute_force_mean
require(ggplot2)
require(dplyr)
setwd("/home/joao/projects/master-degree/rsa/results")
bruteData = read.csv(file = "results-brute.csv", sep = ";")
pollardData = read.csv(file = "results-pollard.csv", sep = ";")
bruteData = bruteData %>%
group_by(key_size) %>%
summarise(
generate_keys_mean = mean(generate_keys) / 1000,
encrypt_mean = mean(encrypt) / 1000,
decrypt_mean = mean(decrypt) / 1000,
brute_force_mean = mean(brute_force) / 1000
)
pollardData = pollardData %>%
group_by(key_size) %>%
summarise(
generate_keys_mean = mean(generate_keys) / 1000,
encrypt_mean = mean(encrypt) / 1000,
decrypt_mean = mean(decrypt) / 1000,
brute_force_mean = mean(brute_force) / 1000
)
if(plotType == "all_brute") {
gg <- ggplot(bruteData, aes(key_size))
gg <- gg + ggtitle("All Brute Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Brute force"))
gg
} else if (plotType == "all_pollard") {
gg <- ggplot(pollardData, aes(key_size))
gg <- gg + ggtitle("All Pollard Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Pollard force"))
gg
} else if (plotType == "all_force") {
gg <- ggplot(pollardData, aes(key_size))
gg <- gg + ggtitle("All Pollard Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Pollard force"))
gg <- gg + geom_line(aes(y = bruteData$brute_force_mean, color = "Pollard force"))
gg
}
length(pollardData)
length(pollardData$key_size)
length(bruteData$key_size)
allForceData = data.frame(key_size = pollardData$key_size, pollard = pollardData$brute_force_mean)
allForceData
allForceData = data.frame(key_size = pollardData$key_size, pollard = pollardData$brute_force_mean, brute = rep(0, length(pollardData$key_size)))
allForceData
allForceData$brute[allForceData$key_size = bruteData$key_size,]
allForceData$brute[allForceData$key_size == bruteData$key_size,]
allForceData$key_size == bruteData$key_size
allForceData$brute[1,]
allForceData$brute[1]
allForceData$brute[allForceData$key_size == bruteData$key_size]
allForceData = data.frame(key_size = pollardData$key_size, pollard = pollardData$brute_force_mean, brute = rep(0, length(pollardData$key_size)))
allForceData$brute[allForceData$key_size == bruteData$key_size] = bruteData$brute[allForceData$key_size == bruteData$key_size]
allForceData
allForceData$brute[allForceData$key_size == bruteData$key_size]
allForceData$brute[allForceData$key_size == bruteData$key_size]
merge()
merge(data.frame(pollardData, row.names=NULL), data.frame(bruteData, row.names=NULL), by = 0, all = TRUE)[-1]
merge(data.frame(pollardData, row.names=NULL), data.frame(bruteData, row.names=NULL), by = "key_size", all = TRUE)[-1]
allDataMerged = merge(data.frame(pollardData, row.names=NULL), data.frame(bruteData, row.names=NULL), by = "key_size", all = TRUE)[-1]
allDataMerged
allDataMerged = merge(data.frame(pollardData, row.names=NULL), data.frame(bruteData, row.names=NULL), by = "key_size", all = TRUE)[-1]
allDataMerged[,1:3]
allDataMerged[,0:3]
allDataMerged[,0:1]
allDataMerged[1,]
allDataMerged[0:1,]
allDataMerged[,1]
allDataMerged[,1:2]
allDataMerged[,0:2]
names(allDataMerged)
allDataMerged = merge(data.frame(pollardData, row.names=NULL), data.frame(bruteData, row.names=NULL), by = "key_size", all = TRUE)
allDataMerged
allDataMerged = merge(data.frame(pollardData, row.names=NULL), data.frame(bruteData, row.names=NULL), by = "key_size", all = TRUE, suffixes = c("pollard", "brute"))
allDataMerged
allDataMerged = merge(data.frame(pollardData, row.names=NULL), data.frame(bruteData, row.names=NULL), by = "key_size", all = TRUE, suffixes = c("pollard_", "_brute"))
gg <- ggplot(allDataMerged, aes(key_size))
gg <- gg + ggtitle("All Pollard Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = brute_force_mean_brute, color = "Brute force"))
gg <- gg + geom_line(aes(y = brute_force_mean_pollard, color = "Pollard force"))
gg
names(allDataMerged)
require(ggplot2)
require(dplyr)
setwd("/home/joao/projects/master-degree/rsa/results")
bruteData = read.csv(file = "results-brute.csv", sep = ";")
pollardData = read.csv(file = "results-pollard.csv", sep = ";")
bruteData = bruteData %>%
group_by(key_size) %>%
summarise(
generate_keys_mean = mean(generate_keys) / 1000,
encrypt_mean = mean(encrypt) / 1000,
decrypt_mean = mean(decrypt) / 1000,
brute_force_mean = mean(brute_force) / 1000
)
pollardData = pollardData %>%
group_by(key_size) %>%
summarise(
generate_keys_mean = mean(generate_keys) / 1000,
encrypt_mean = mean(encrypt) / 1000,
decrypt_mean = mean(decrypt) / 1000,
brute_force_mean = mean(brute_force) / 1000
)
allDataMerged = merge(data.frame(pollardData, row.names=NULL), data.frame(bruteData, row.names=NULL), by = "key_size", all = TRUE, suffixes = c("_pollard", "_brute"))
if(plotType == "all_brute") {
gg <- ggplot(bruteData, aes(key_size))
gg <- gg + ggtitle("All Brute Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Brute force"))
gg
} else if (plotType == "all_pollard") {
gg <- ggplot(pollardData, aes(key_size))
gg <- gg + ggtitle("All Pollard Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Pollard force"))
gg
} else if (plotType == "all_force") {
gg <- ggplot(allDataMerged, aes(key_size))
gg <- gg + ggtitle("All Pollard Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = brute_force_mean_brute, color = "Brute force"))
gg <- gg + geom_line(aes(y = brute_force_mean_pollard, color = "Pollard force"))
gg
}
names(allDataMerge)
names(allDataMerged)
gg <- ggplot(allDataMerged, aes(key_size))
gg <- gg + ggtitle("All Pollard Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean_brute, color = "Brute force"))
gg <- gg + geom_line(aes(y = generate_keys_mean_pollard, color = "Pollard force"))
gg
require(ggplot2)
require(dplyr)
setwd("/home/joao/projects/master-degree/rsa/results")
bruteData = read.csv(file = "results-brute.csv", sep = ";")
pollardData = read.csv(file = "results-pollard.csv", sep = ";")
bruteData = bruteData %>%
group_by(key_size) %>%
summarise(
generate_keys_mean = mean(generate_keys) / 1000,
encrypt_mean = mean(encrypt) / 1000,
decrypt_mean = mean(decrypt) / 1000,
brute_force_mean = mean(brute_force) / 1000
)
pollardData = pollardData %>%
group_by(key_size) %>%
summarise(
generate_keys_mean = mean(generate_keys) / 1000,
encrypt_mean = mean(encrypt) / 1000,
decrypt_mean = mean(decrypt) / 1000,
brute_force_mean = mean(brute_force) / 1000
)
allDataMerged = merge(data.frame(pollardData, row.names=NULL), data.frame(bruteData, row.names=NULL), by = "key_size", all = TRUE, suffixes = c("_pollard", "_brute"))
gg <- ggplot(bruteData, aes(key_size))
gg <- gg + ggtitle("All Brute Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Brute"))
gg
gg <- ggplot(pollardData, aes(key_size))
gg <- gg + ggtitle("All Pollard Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Pollard"))
gg
gg <- ggplot(allDataMerged, aes(key_size))
gg <- gg + ggtitle("Break Force Times")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = brute_force_mean_brute, color = "Brute"))
gg <- gg + geom_line(aes(y = brute_force_mean_pollard, color = "Pollard"))
gg
gg <- ggplot(allDataMerged, aes(key_size))
gg <- gg + ggtitle("All Generate Keys")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean_brute, color = "Brute"))
gg <- gg + geom_line(aes(y = generate_keys_mean_pollard, color = "Pollard"))
gg
gg <- ggplot(allDataMerged, aes(key_size))
gg <- gg + ggtitle("All Encrypt")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean_brute, color = "Brute"))
gg <- gg + geom_line(aes(y = generate_keys_mean_pollard, color = "Pollard"))
gg
gg <- ggplot(allDataMerged, aes(key_size))
gg <- gg + ggtitle("All Dncrypt")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean_brute, color = "Brute"))
gg <- gg + geom_line(aes(y = generate_keys_mean_pollard, color = "Pollard"))
gg
gg <- ggplot(bruteData, aes(key_size))
gg <- gg + ggtitle("All Brute Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Brute"))
gg
gg <- ggplot(bruteData, aes(key_size))
gg <- gg + ggtitle("All Brute Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg
gg <- ggplot(bruteData, aes(key_size))
gg <- gg + ggtitle("All Brute Force")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean, color = "Generate Keys"))
gg <- gg + geom_line(aes(y = encrypt_mean, color = "Encrypt"))
gg <- gg + geom_line(aes(y = decrypt_mean, color = "Decrypt"))
gg <- gg + geom_line(aes(y = brute_force_mean, color = "Brute"))
gg
gg <- ggplot(allDataMerged, aes(key_size))
gg <- gg + ggtitle("All Dncrypt")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean_brute, color = "Brute"))
gg <- gg + geom_line(aes(y = generate_keys_mean_pollard, color = "Pollard"))
gg
require(ggplot2)
require(dplyr)
setwd("/home/joao/projects/master-degree/rsa/results")
bruteData = read.csv(file = "results-brute.csv", sep = ";")
pollardData = read.csv(file = "results-pollard.csv", sep = ";")
bruteData = bruteData %>%
group_by(key_size) %>%
summarise(
generate_keys_mean = mean(generate_keys) / 1000,
encrypt_mean = mean(encrypt) / 1000,
decrypt_mean = mean(decrypt) / 1000,
brute_force_mean = mean(brute_force) / 1000
)
pollardData = pollardData %>%
group_by(key_size) %>%
summarise(
generate_keys_mean = mean(generate_keys) / 1000,
encrypt_mean = mean(encrypt) / 1000,
decrypt_mean = mean(decrypt) / 1000,
brute_force_mean = mean(brute_force) / 1000
)
allDataMerged = merge(data.frame(pollardData, row.names=NULL), data.frame(bruteData, row.names=NULL), by = "key_size", all = TRUE, suffixes = c("_pollard", "_brute"))
gg <- ggplot(allDataMerged, aes(key_size))
gg <- gg + ggtitle("All Generate Keys")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean_brute, color = "Brute"))
gg <- gg + geom_line(aes(y = generate_keys_mean_pollard, color = "Pollard"))
gg
gg <- ggplot(allDataMerged, aes(key_size))
gg <- gg + ggtitle("All Encrypt")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean_brute, color = "Brute"))
gg <- gg + geom_line(aes(y = generate_keys_mean_pollard, color = "Pollard"))
gg
gg <- ggplot(allDataMerged, aes(key_size))
gg <- gg + ggtitle("All Decrypt")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = generate_keys_mean_brute, color = "Brute"))
gg <- gg + geom_line(aes(y = generate_keys_mean_pollard, color = "Pollard"))
gg
gg <- ggplot(allDataMerged, aes(key_size))
gg <- gg + ggtitle("Break Force Times")
gg <- gg + xlab("Key size")
gg <- gg + ylab("Time (s)")
gg <- gg + geom_line(aes(y = brute_force_mean_brute, color = "Brute"))
gg <- gg + geom_line(aes(y = brute_force_mean_pollard, color = "Pollard"))
gg
plot(pmdViolTypes ~ entropy, data = data, ylab = "Tipos de violações", xlab = "Entropia", main = "Conhecimento vs Esforço")
library(dplyr)
library(ggplot2)
setwd("/home/joao/projects/java-source-code-quality-analyzer/statistics")
data <- read.csv("report.csv", sep = ";")
classStr = c("1) Low","2) Medium","3) High","4) Very High")
data$compClassStr = classStr[data$compClass]
names(data)
cor(data[,3:11])
plot(compClass ~ entropy, data = data, ylab = "Complexidade por classe", xlab = "Entropia", main = "Correlação entropia e complexidade")
plot(pmdViolTypes ~ entropy, data = data, ylab = "Tipos de violações", xlab = "Entropia", main = "Conhecimento vs Esforço")
plot(pmdViolTypes ~ log10(pmdViol), data = data, ylab = "Quantidade de tipos de violações", xlab = expression(paste("Número de violações ","log"["10"])), main = "Correlação número de violações e tipos de violações")
plot(pmdViolTypes ~ log(pmdViol,base=exp(1)), data = data, ylab = "Tipos de violações", xlab = expression(paste("Número de violações (", "log"["e"], ")")), main = "Conhecimento vs Esforço")
